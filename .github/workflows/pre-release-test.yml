name: Pre-release Tests

on:
  pull_request:
    branches:
      - master
    paths:
      - '**/*.tf'
      - '.github/workflows/pre-release-test.yml'
  workflow_dispatch:

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform-version:
          - "1.3.0"  # Minimum supported version
          - "latest" # Latest stable version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform-version }}

      - name: Clean Terraform Modules Cache
        run: |
          if [ -d .terraform/modules ]; then
            echo "Cleaning up .terraform/modules directory..."
            find .terraform/modules -type d -name "*" -prune -exec rm -rf {} \; 2>/dev/null || true
          fi
          # Clean any potential terraform lock file
          if [ -f .terraform.lock.hcl ]; then
            rm .terraform.lock.hcl
          fi
        working-directory: .

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: .
        env:
          # Mock credentials for testing
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"
          AWS_REGION: "us-east-1"

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: .

      - name: Terraform Validate
        run: terraform validate
        working-directory: .
        env:
          # Mock credentials for testing
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"
          AWS_REGION: "us-east-1"

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: terraform-validate
    strategy:
      matrix:
        example:
          - "simple"
          - "complete"
          - "protected"
        terraform-version:
          - "latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform-version }}

      - name: Clean Terraform Modules Cache
        run: |
          if [ -d ./examples/${{ matrix.example }}/.terraform/modules ]; then
            echo "Cleaning up .terraform/modules directory..."
            find ./examples/${{ matrix.example }}/.terraform/modules -type d -name "*" -prune -exec rm -rf {} \; 2>/dev/null || true
          fi
          # Clean any potential terraform lock file
          if [ -f ./examples/${{ matrix.example }}/.terraform.lock.hcl ]; then
            rm ./examples/${{ matrix.example }}/.terraform.lock.hcl
          fi
        working-directory: .

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: ./examples/${{ matrix.example }}
        env:
          # Mock credentials for testing
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"
          AWS_REGION: "us-east-1"

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./examples/${{ matrix.example }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./examples/${{ matrix.example }}
        env:
          # Mock credentials for testing
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"
          AWS_REGION: "us-east-1"

      - name: Terraform Plan
        run: terraform plan -input=false -lock=false -var-file=terraform.tfvars || echo "Plan step failed but continuing"
        working-directory: ./examples/${{ matrix.example }}
        continue-on-error: true
        env:
          AWS_REGION: "us-east-1"
          TF_VAR_region: "us-east-1"
          # Mock credentials for testing only - these won't work for actual AWS operations
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"

  aws-provider-compatibility:
    name: AWS Provider Compatibility
    runs-on: ubuntu-latest
    needs: terraform-validate
    strategy:
      matrix:
        aws-provider:
          - "5.0.0"   # Minimum version for current module
          - "latest"  # Latest version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Clean test environment
        run: |
          # Remove any existing test files or state
          rm -f aws-provider-version-test.tf test-module.tf .terraform.lock.hcl
          rm -rf .terraform
          
      - name: Create version-specific test configuration
        run: |
          # Create a simple test file that only references the required provider version
          cat << EOF > test-version.tf
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "${{ matrix.aws-provider }}"
              }
            }
          }
          
          # Create minimal module usage (no provider block, uses the one from versions.tf)
          module "ecr_test" {
            source = "./"
            name   = "test-repo"
          }
          EOF

      - name: Terraform Init
        run: |
          # Initialize with a clean environment
          terraform init -backend=false -get=false
        env:
          # Mock credentials for testing
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"
          AWS_REGION: "us-east-1"
          
      - name: Terraform Validate
        run: terraform validate
        env:
          AWS_ACCESS_KEY_ID: "mock-access-key-for-testing"
          AWS_SECRET_ACCESS_KEY: "mock-secret-key-for-testing"
          AWS_REGION: "us-east-1"