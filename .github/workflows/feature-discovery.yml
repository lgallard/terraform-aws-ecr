name: ECR Feature Discovery

on:
  schedule:
    # Test run in 30 minutes (21:12 UTC today)
    - cron: '12 21 * * *'

  workflow_dispatch:
    inputs:
      provider_version:
        description: 'AWS Provider version to check (default: latest)'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Run analysis without creating issues'
        required: false
        default: false
        type: boolean
      force_scan:
        description: 'Force full scan even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  discover-ecr-features:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create feature tracker directory
        run: |
          mkdir -p .github/feature-tracker

          # Create initial tracker file if it doesn't exist
          if [ ! -f .github/feature-tracker/ecr-features.json ]; then
            cat > .github/feature-tracker/ecr-features.json << 'EOF'
          {
            "last_scan": "1970-01-01T00:00:00Z",
            "provider_version": "0.0.0",
            "scan_history": [],
            "features": {},
            "issues_created": []
          }
          EOF
            echo "Created initial feature tracker file"
          fi

      - name: Run Claude Code Feature Discovery
        id: claude-discovery
        uses: anthropics/claude-code-action@beta
        env:
          GITHUB_TOKEN: ${{ secrets.CLAUDE_ISSUE_TOKEN }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # MCP Configuration for Terraform and Context7 documentation access
          mcp_config: |
            {
              "mcpServers": {
                "terraform": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@modelcontextprotocol/server-terraform@latest"
                  ]
                },
                "context7": {
                  "command": "npx",
                  "args": [
                    "-y",
                    "@upstash/context7-mcp@latest"
                  ]
                }
              }
            }

          # Allow necessary tools for feature discovery
          allowed_tools: |
            mcp__terraform-server__getProviderDocs
            mcp__terraform-server__resolveProviderDocID
            mcp__terraform-server__searchModules
            mcp__terraform-server__moduleDetails
            mcp__context7__resolve-library-id
            mcp__context7__get-library-docs
            Bash(git diff)
            Bash(git status)
            Bash(gh issue create)
            Bash(gh issue list)
            Bash(jq)
            Bash(cat)
            Bash(echo)

          # Direct prompt for Claude Code to perform feature discovery
          direct_prompt: |
            # ECR Feature Discovery Analysis

            You are performing automated feature discovery for the terraform-aws-ecr module.

            ## Objective
            Analyze the latest AWS provider ECR resources and compare them with the current module implementation to identify:
            1. **New Features**: ECR resources/arguments not yet implemented
            2. **Deprecations**: Features marked as deprecated in the provider
            3. **Bug Fixes**: Important fixes mentioned in provider changelogs

            ## Configuration
            - Provider Version: ${{ inputs.provider_version || 'latest' }}
            - Dry Run Mode: ${{ inputs.dry_run }}
            - Force Scan: ${{ inputs.force_scan }}

            ## Process

            ### Step 1: Load Current State
            Read the feature tracking database:
            ```bash
            cat .github/feature-tracker/ecr-features.json
            ```

            ### Step 2: Fetch AWS Provider ECR Documentation
            Use the Terraform MCP server to get the latest ECR documentation:

            1. Use `mcp__terraform-server__resolveProviderDocID` with:
               - providerName: "aws"
               - providerNamespace: "hashicorp"
               - serviceSlug: "ecr"
               - providerVersion: "${{ inputs.provider_version || 'latest' }}"
               - providerDataType: "resources"

            2. Get documentation for all ECR resources (aws_ecr_*)
            3. Also check data sources with providerDataType: "data-sources"

            ### Step 3: Analyze Current Module Implementation
            Examine these files to understand current implementation:
            - `main.tf`
            - `repository.tf`
            - `variables.tf`
            - `outputs.tf`
            - `modules/*/` directories

            Create an inventory of:
            - Implemented resources
            - Implemented arguments/attributes
            - Configuration patterns used

            ### Step 4: Comparison and Analysis
            Compare provider documentation with module implementation and perform detailed analysis:

            **New Features to Look For:**
            - New `aws_ecr_*` resources not in the module
            - New arguments on existing resources
            - New data sources (`data.aws_ecr_*`)
            - New lifecycle configurations
            - New security features

            **For Each Discovery, Document:**
            - **Feature Type**: Resource, Argument, Data Source, Enhancement
            - **AWS Resource**: Full resource name (e.g., aws_ecr_repository_creation_template)
            - **Arguments**: Specific new arguments with their types and descriptions
            - **Provider Version**: When the feature was introduced
            - **Priority Level**: Critical (security/breaking), High (major feature), Medium (enhancement), Low (minor)
            - **Implementation Complexity**: High (major changes), Medium (moderate effort), Low (simple addition)
            - **Module Impact**: Which files need modification (main.tf, variables.tf, etc.)
            - **Dependencies**: Any new provider requirements or version constraints
            - **Use Cases**: Real-world scenarios where this feature would be valuable

            **Deprecations to Check:**
            - Arguments marked as deprecated with removal timeline
            - Resources marked for removal with migration path
            - Configuration patterns that are outdated with modern alternatives

            **Bug Fixes:**
            - Check Context7 for AWS provider changelogs
            - Look for ECR-related fixes that might affect the module
            - Document the specific issue being fixed and module impact

            ### Step 5: Issue Creation
            For each significant finding, create detailed GitHub issues with comprehensive analysis.

            **CRITICAL: Generate Detailed, Actionable Content**

            **Issue Quality Requirements:**
            1. **Comprehensive Analysis**: Include detailed findings from your Terraform MCP analysis
            2. **Specific Implementation Guidance**: Provide exact resource names, arguments, and code patterns
            3. **Real Provider Documentation**: Reference actual AWS provider documentation links
            4. **Module Integration Details**: Explain how the feature fits into existing module structure
            5. **Practical Examples**: Include working code examples with actual values

            **Content Generation Instructions:**
            - Replace `[FEATURE_NAME]` with the actual discovered feature name (e.g., "image_tag_mutability_exclusion_filter")
            - Replace `[DETAILED_DESCRIPTION_FROM_ANALYSIS]` with comprehensive analysis from provider docs including:
              * What the feature does and why it's valuable
              * How it works in the AWS ecosystem
              * Benefits for ECR users
              * Integration requirements
            - Replace `[PRIORITY_LEVEL]` with justified priority based on impact analysis
            - Replace `[AWS_RESOURCE_NAME]` with exact resource (e.g., "aws_ecr_repository")
            - Replace `[SPECIFIC_ARGUMENTS]` with actual argument names, types, and descriptions from provider docs
            - Replace `[FILES_TO_MODIFY]` with specific module files requiring changes
            - Replace `[COMPLEXITY_ASSESSMENT]` with detailed complexity analysis including effort estimation
            - Replace `[PROVIDER_DOCS_LINK]` with actual Terraform registry documentation URL
            - Replace `[REGISTRY_LINK]` with actual AWS provider documentation link
            - Include actual working code examples with realistic values

            **If NOT in dry run mode (${{ inputs.dry_run }} == false):**

            Create GitHub issues using these enhanced templates with detailed information:

            ```bash
            # For new features - include comprehensive details
            gh issue create --title "feat: Add support for [FEATURE_NAME]" \
              --body "## 🚀 Auto-Discovered ECR Feature

            **Feature:** [FEATURE_NAME]
            **AWS Provider Version:** ${{ inputs.provider_version || 'latest' }}
            **Priority:** [PRIORITY_LEVEL]
            **Discovery Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            ### 📋 Description
            [DETAILED_DESCRIPTION_FROM_ANALYSIS]

            ### 🔧 Implementation Requirements
            - **Resource:** \`[AWS_RESOURCE_NAME]\`
            - **New Arguments:** \`[SPECIFIC_ARGUMENTS]\`
            - **Module Files to Update:** [FILES_TO_MODIFY]
            - **Estimated Complexity:** [COMPLEXITY_ASSESSMENT]

            ### 📚 Documentation
            - **Provider Documentation:** [PROVIDER_DOCS_LINK]
            - **Terraform Registry:** [REGISTRY_LINK]

            ### 🔍 Discovery Details
            - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Feature Tracker:** \`.github/feature-tracker/ecr-features.json\`
            - **Detection Method:** Terraform MCP Server analysis

            ### ✅ Acceptance Criteria
            - [ ] Implement resource/argument in module
            - [ ] Add variable validation if needed
            - [ ] Create example usage
            - [ ] Update documentation
            - [ ] Add Terratest coverage" \
              --label "enhancement,aws-provider-update,auto-discovered" \
              --assignee "@me"

            # For deprecations - include migration guidance
            gh issue create --title "chore: Handle deprecation of [DEPRECATED_FEATURE]" \
              --body "## ⚠️ Auto-Discovered Deprecation

            **Deprecated Feature:** [DEPRECATED_FEATURE]
            **AWS Provider Version:** ${{ inputs.provider_version || 'latest' }}
            **Discovery Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Breaking Change Risk:** [RISK_LEVEL]

            ### 📋 Deprecation Details
            [DETAILED_DEPRECATION_INFO]

            ### 🚨 Impact Analysis
            - **Current Usage:** [CURRENT_USAGE_IN_MODULE]
            - **Migration Complexity:** [MIGRATION_COMPLEXITY]

            ### 🔄 Migration Path
            - **Replacement Feature:** [REPLACEMENT_OPTION]
            - **Migration Steps:** [STEP_BY_STEP_GUIDE]

            ### 📅 Action Required
            - [ ] Plan migration strategy
            - [ ] Update module implementation
            - [ ] Create migration guide
            - [ ] Notify users via changelog

            ### 📚 Reference
            - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Provider Documentation:** [DEPRECATION_DOCS]" \
              --label "deprecation,breaking-change,auto-discovered" \
              --assignee "@me"

            # For bug fixes - include technical details
            gh issue create --title "fix: [BUG_DESCRIPTION]" \
              --body "## 🔧 Auto-Discovered Bug Fix

            **Issue:** [BUG_DESCRIPTION]
            **AWS Provider Version:** ${{ inputs.provider_version || 'latest' }}
            **Priority:** [PRIORITY_LEVEL]
            **Discovery Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            ### 🐛 Problem Description
            [DETAILED_BUG_DESCRIPTION]

            ### 🛠️ Fix Requirements
            - **Root Cause:** [ROOT_CAUSE_ANALYSIS]
            - **Files to Update:** [FILES_TO_MODIFY]
            - **Validation Changes:** [VALIDATION_UPDATES]

            ### 🧪 Testing Requirements
            - [ ] Update existing tests
            - [ ] Add regression tests
            - [ ] Validate with provider version ${{ inputs.provider_version || 'latest' }}

            ### 📚 Reference
            - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Provider Fix Details:** [FIX_DOCUMENTATION]" \
              --label "bug,aws-provider-update,auto-discovered" \
              --assignee "@me"

            # For security enhancements - include security details
            gh issue create --title "security: Implement [SECURITY_FEATURE]" \
              --body "## 🛡️ Auto-Discovered Security Enhancement

            **Security Feature:** [SECURITY_FEATURE]
            **AWS Provider Version:** ${{ inputs.provider_version || 'latest' }}
            **Security Impact:** [SECURITY_IMPACT]
            **Discovery Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            ### 🔒 Security Enhancement Details
            [DETAILED_SECURITY_DESCRIPTION]

            ### 🎯 Benefits
            - **Security Improvement:** [SECURITY_BENEFITS]
            - **Compliance Impact:** [COMPLIANCE_BENEFITS]
            - **Risk Mitigation:** [RISK_MITIGATION]

            ### 🔧 Implementation Requirements
            - **New Security Arguments:** [SECURITY_ARGUMENTS]
            - **Default Security Posture:** [DEFAULT_CONFIG]

            ### ✅ Security Validation
            - [ ] Implement secure defaults
            - [ ] Add security tests
            - [ ] Update security documentation
            - [ ] Validate compliance requirements

            ### 📚 Reference
            - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Security Documentation:** [SECURITY_DOCS]" \
              --label "security,aws-provider-update,auto-discovered" \
              --assignee "@me"
            ```

            ### Step 6: Update Feature Tracker
            Update `.github/feature-tracker/ecr-features.json` with:
            - Current scan timestamp
            - Provider version analyzed
            - New findings
            - Issues created
            - Scan summary

            ### Step 7: Generate Comprehensive Summary Report
            Create a detailed summary report including:

            **Discovery Summary:**
            - Total features discovered with breakdown by type (resources, arguments, data sources)
            - Detailed analysis of each discovery with provider version and impact assessment
            - Deprecations found with timeline and migration complexity
            - Bug fixes identified with specific module impact

            **Implementation Analysis:**
            - Priority breakdown: Critical/High/Medium/Low with justification
            - Complexity assessment: effort required for each feature
            - Module architecture impact: which files and patterns need updates
            - Dependency requirements: provider version constraints

            **Issues Created:**
            - List of GitHub issues created with issue numbers and links
            - Content quality summary: level of detail provided for each issue
            - Categorization: features vs deprecations vs bug fixes

            **Quality Metrics:**
            - Analysis depth: how comprehensive the provider documentation review was
            - Content accuracy: confidence level in findings
            - Implementation guidance: specificity of development instructions

            **Next Steps Recommendations:**
            - High-priority items requiring immediate attention
            - Long-term module evolution suggestions
            - Community impact assessment

            ## Important Notes
            - Skip creating issues for features already tracked as "implemented"
            - Check existing GitHub issues to avoid duplicates
            - Prioritize security and breaking changes
            - Focus on ECR-specific features (ignore general AWS provider changes)
            - Be thorough but avoid false positives

            ## Expected Output
            Provide a detailed report of your analysis and actions taken.

          # Use agent mode for automation workflows
          mode: agent

      - name: Commit feature tracker updates
        if: steps.claude-discovery.conclusion == 'success'
        run: |
          set -euo pipefail

          # Check if there are changes to commit
          if git diff --quiet .github/feature-tracker/; then
            echo "No changes to feature tracker detected"
            exit 0
          fi

          # Configure git
          git config --global user.name "ECR Feature Discovery Bot"
          git config --global user.email "actions@github.com"

          # Commit changes
          git add .github/feature-tracker/
          git commit -m "chore: update ECR feature discovery tracker

          - Updated feature tracking database
          - Scan completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Provider version: ${{ inputs.provider_version || 'latest' }}

          [skip ci]"

          # Push changes
          git push origin HEAD

          echo "Feature tracker updated successfully"

      - name: Workflow Summary
        if: always()
        run: |
          echo "## 🔍 ECR Feature Discovery Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Configuration
          echo "### ⚙️ Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Provider Version**: \`${{ inputs.provider_version || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run Mode**: \`${{ inputs.dry_run }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Scan**: \`${{ inputs.force_scan }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # MCP Configuration
          echo "### 🔗 MCP Servers" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform MCP**: \`@modelcontextprotocol/server-terraform@latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Context7 MCP**: \`@upstash/context7-mcp@latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Status
          echo "### 📊 Execution Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.claude-discovery.conclusion }}" = "success" ]; then
            echo "- ✅ **Feature Discovery**: Completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Feature Discovery**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Available Commands
          echo "### 🚀 Manual Execution" >> $GITHUB_STEP_SUMMARY
          echo "Run feature discovery manually:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Standard discovery" >> $GITHUB_STEP_SUMMARY
          echo "gh workflow run feature-discovery.yml" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Dry run mode" >> $GITHUB_STEP_SUMMARY
          echo "gh workflow run feature-discovery.yml -f dry_run=true" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Specific provider version" >> $GITHUB_STEP_SUMMARY
          echo "gh workflow run feature-discovery.yml -f provider_version=5.82.0" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
